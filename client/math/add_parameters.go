// Code generated by go-swagger; DO NOT EDIT.

package math

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAddParams creates a new AddParams object
// with the default values initialized.
func NewAddParams() *AddParams {
	var ()
	return &AddParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddParamsWithTimeout creates a new AddParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddParamsWithTimeout(timeout time.Duration) *AddParams {
	var ()
	return &AddParams{

		timeout: timeout,
	}
}

// NewAddParamsWithContext creates a new AddParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddParamsWithContext(ctx context.Context) *AddParams {
	var ()
	return &AddParams{

		Context: ctx,
	}
}

// NewAddParamsWithHTTPClient creates a new AddParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddParamsWithHTTPClient(client *http.Client) *AddParams {
	var ()
	return &AddParams{
		HTTPClient: client,
	}
}

/*AddParams contains all the parameters to send to the API endpoint
for the add operation typically these are written to a http.Request
*/
type AddParams struct {

	/*A*/
	A int64
	/*B*/
	B int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add params
func (o *AddParams) WithTimeout(timeout time.Duration) *AddParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add params
func (o *AddParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add params
func (o *AddParams) WithContext(ctx context.Context) *AddParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add params
func (o *AddParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add params
func (o *AddParams) WithHTTPClient(client *http.Client) *AddParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add params
func (o *AddParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithA adds the a to the add params
func (o *AddParams) WithA(a int64) *AddParams {
	o.SetA(a)
	return o
}

// SetA adds the a to the add params
func (o *AddParams) SetA(a int64) {
	o.A = a
}

// WithB adds the b to the add params
func (o *AddParams) WithB(b int64) *AddParams {
	o.SetB(b)
	return o
}

// SetB adds the b to the add params
func (o *AddParams) SetB(b int64) {
	o.B = b
}

// WriteToRequest writes these params to a swagger request
func (o *AddParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param a
	qrA := o.A
	qA := swag.FormatInt64(qrA)
	if qA != "" {
		if err := r.SetQueryParam("a", qA); err != nil {
			return err
		}
	}

	// query param b
	qrB := o.B
	qB := swag.FormatInt64(qrB)
	if qB != "" {
		if err := r.SetQueryParam("b", qB); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
