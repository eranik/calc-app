// Code generated by go-swagger; DO NOT EDIT.

package math

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewAddParams creates a new AddParams object
// no default values defined in spec.
func NewAddParams() AddParams {

	return AddParams{}
}

// AddParams contains all the bound params for the add operation
// typically these are obtained from a http.Request
//
// swagger:parameters add
type AddParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	A int64
	/*
	  Required: true
	  In: query
	*/
	B int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAddParams() beforehand.
func (o *AddParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qA, qhkA, _ := qs.GetOK("a")
	if err := o.bindA(qA, qhkA, route.Formats); err != nil {
		res = append(res, err)
	}

	qB, qhkB, _ := qs.GetOK("b")
	if err := o.bindB(qB, qhkB, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindA binds and validates parameter A from query.
func (o *AddParams) bindA(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("a", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("a", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("a", "query", "int64", raw)
	}
	o.A = value

	return nil
}

// bindB binds and validates parameter B from query.
func (o *AddParams) bindB(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("b", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("b", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("b", "query", "int64", raw)
	}
	o.B = value

	return nil
}
