// Code generated by go-swagger; DO NOT EDIT.

package math

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/eranik/calc-app/models"
)

// SubtractHandlerFunc turns a function with the right signature into a subtract handler
type SubtractHandlerFunc func(SubtractParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn SubtractHandlerFunc) Handle(params SubtractParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// SubtractHandler interface for that can handle valid subtract params
type SubtractHandler interface {
	Handle(SubtractParams, *models.Principal) middleware.Responder
}

// NewSubtract creates a new http.Handler for the subtract operation
func NewSubtract(ctx *middleware.Context, handler SubtractHandler) *Subtract {
	return &Subtract{Context: ctx, Handler: handler}
}

/*Subtract swagger:route GET /subtract math subtract

Get subtract of two integers, x and y, as a result.

*/
type Subtract struct {
	Context *middleware.Context
	Handler SubtractHandler
}

func (o *Subtract) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSubtractParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SubtractOKBody subtract o k body
//
// swagger:model SubtractOKBody
type SubtractOKBody struct {

	// res
	Res int64 `json:"res"`
}

// Validate validates this subtract o k body
func (o *SubtractOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SubtractOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubtractOKBody) UnmarshalBinary(b []byte) error {
	var res SubtractOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
