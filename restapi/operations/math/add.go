// Code generated by go-swagger; DO NOT EDIT.

package math

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"calc-app/models"
)

// AddHandlerFunc turns a function with the right signature into a add handler
type AddHandlerFunc func(AddParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn AddHandlerFunc) Handle(params AddParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// AddHandler interface for that can handle valid add params
type AddHandler interface {
	Handle(AddParams, *models.Principal) middleware.Responder
}

// NewAdd creates a new http.Handler for the add operation
func NewAdd(ctx *middleware.Context, handler AddHandler) *Add {
	return &Add{Context: ctx, Handler: handler}
}

/*Add swagger:route GET /add math add

Get sum of two integers, x and y, as a result.

*/
type Add struct {
	Context *middleware.Context
	Handler AddHandler
}

func (o *Add) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddOKBody add o k body
//
// swagger:model AddOKBody
type AddOKBody struct {

	// res
	Res int64 `json:"res"`
}

// Validate validates this add o k body
func (o *AddOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddOKBody) UnmarshalBinary(b []byte) error {
	var res AddOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
